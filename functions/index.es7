const admin = require("firebase-admin")
const functions = require("firebase-functions")
const algoliasearch = require("algoliasearch")
const secureCompare = require("secure-compare")
const express = require("express")
const cors = require("cors")

const serviceAccount = require("./service-account.json")

const { cleanupExpired } = require("./controllers/expired/index.js")
const { deleteCollection } = require("./helpers/deleteCollection/index.js")

const ALGOLIA_ID = functions.config().algolia.app_id
const ALGOLIA_ADMIN_KEY = functions.config().algolia.api_key
const CRON_KEY = functions.config().cron.key

const ALGOLIA_GIVEAWAYS_INDEX = "giveaways"
const client = algoliasearch(ALGOLIA_ID, ALGOLIA_ADMIN_KEY)

const app = express()

app.use(cors({ origin: true }))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://sparkify-30f42.firebaseio.com",
})

app.delete("/expired", cleanupExpired(admin, functions.config().cron.key))
// app.get("/users/username", cleanupExpired(admin, functions.config().cron.key))

exports.app = functions.https.onRequest(app)

// Update the search index every time a giveaway is written.
exports.onGiveawayCreate = functions.firestore
  .document("giveaways/{giveawayId}")
  .onCreate(event => {
    // Get the giveaway document
    const giveaway = event.data.data()

    // Add an 'objectID' field which Algolia requires
    giveaway.objectID = event.params.giveawayId

    // Write to the algolia index
    const index = client.initIndex(ALGOLIA_GIVEAWAYS_INDEX)
    return index.saveObject(giveaway)
  })

exports.onGiveawayDelete = functions.firestore
  .document("giveaways/{giveawayId}")
  .onDelete(event => {
    const giveaway = event.data.data()
    const index = client.initIndex(ALGOLIA_GIVEAWAYS_INDEX)

    return index.deleteObject(event.params.giveawayId)
  })

exports.onUserDelete = functions.auth.user().onDelete(async event => {
  const { uid } = event.data

  try {
    const userRef = admin
      .firestore()
      .collection("users")
      .doc(uid)
    const giveawaysRef = admin.firestore().collection("giveaways")
    const giveawaysSnap = await giveawaysRef
      .where("createdBy.uid", "==", uid)
      .get()

    if (!giveawaysSnap.empty) {
      const deleteGiveawaysBatch = admin.firestore().batch()
      const moveGiveawaysBatch = admin.firestore().batch()

      giveawaysSnap.forEach(doc => {
        const data = doc.data()
        const { id } = data

        deleteGiveawaysBatch.delete(doc.ref)

        moveGiveawaysBatch.set(
          admin
            .firestore()
            .collection("removedGiveaways")
            .doc(id),
          {
            ...data,
            removeMethod: "DELETE",
          },
        )
      })

      const batchSize = 30

      await Promise.all([
        deleteGiveawaysBatch.commit(),
        moveGiveawaysBatch.commit(),
        deleteCollection(
          admin.firestore(),
          `users/${uid}/enteredGiveaways`,
          batchSize,
        ),
        deleteCollection(
          admin.firestore(),
          `users/${uid}/createdGiveaways`,
          batchSize,
        ),
        userRef.delete(),
      ])
    }
    return Promise.resolve()
  } catch (error) {
    console.error(error)
  }
})
