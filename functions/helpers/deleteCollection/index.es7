export const deleteCollection = (db, collectionPath, batchSize) => {
  const collectionRef = db.collection(collectionPath)
  const query = collectionRef.orderBy("__name__").limit(batchSize)

  return new Promise((resolve, reject) => {
    deleteQueryBatch(db, query, batchSize, resolve, reject)
  })
}

async function deleteQueryBatch(db, query, batchSize, resolve, reject) {
  try {
    const snapshot = await query.get()
    // When there are no documents left, we are done
    if (snapshot.size == 0) {
      return 0
    }
    // Delete documents in a batch
    const batch = db.batch()
    snapshot.docs.forEach(doc => {
      batch.delete(doc.ref)
    })

    await batch.commit()

    if (snapshot.size === 0) {
      return resolve()
    }

    // Recurse on the next process tick, to avoid
    // exploding the stack.
    process.nextTick(() => {
      deleteQueryBatch(db, query, batchSize, resolve, reject)
    })
  } catch (error) {
    reject(error)
  }
}
